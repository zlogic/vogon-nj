button(mat-fab, class="my-fab", *ngIf="!isEditing()", (click)="addTransaction()")
  mat-icon add
transaction-editor(*ngIf="isEditing()", [transaction]="editingTransaction", (done)="stopEditing()")
div(class="card-container")
  mat-card(class="large-card")
    mat-card-title #{__('Filter and sorting')}
    mat-card-content
      form(#filterForm="ngForm", autocomplete="off", novalidate)
        mat-form-field(style="width:100%;")
          input(matInput, type="text", placeholder=__('Description filter'), name="filterDescription", [(ngModel)]="transactionsService.filterDescription")
          button(matPrefix, mat-icon-button, type="button", aria-label="#{__('Sort by description')}", (click)="transactionsService.applySort('description')")
            mat-icon(*ngIf="transactionsService.sortColumn !== 'description'; else sortDescription") sort
            ng-template(#sortDescription)
              mat-icon(*ngIf="transactionsService.sortAsc") arrow_drop_up
              mat-icon(*ngIf="!transactionsService.sortAsc") arrow_drop_down
        span &nbsp;
        tags-input(placeholder=__("Tags filter"), name="filterTags", [ngModel]="transactionsService.filterTags")
        span &nbsp;
        mat-form-field(style="width:100%;")
          input(matInput, [matDatepicker]="picker", placeholder=__("Date filter"), name="filterDate", [(ngModel)]="transactionsService.filterDate")
          button(matPrefix, mat-icon-button,type="button", aria-label="#{__('Sort by date')}", (click)="transactionsService.applySort('date')")
            mat-icon(*ngIf="transactionsService.sortColumn !== 'date'; else sortDate") sort
            ng-template(#sortDate)
              mat-icon(*ngIf="transactionsService.sortAsc") arrow_drop_up
              mat-icon(*ngIf="!transactionsService.sortAsc") arrow_drop_down
          mat-datepicker-toggle(matSuffix, type="button", [for]="picker")
        mat-datepicker(#picker)
div(class="card-container", infiniteScroll, (scrolled)="transactionsService.nextPage()", [infiniteScrollDisabled]="transactionsService.isLoadingNextPage() || transactionsService.isLastPage()", [immediateCheck]="true", [infiniteScrollContainer]="'mat-sidenav-content'", [fromRoot]="true")
  ng-container(*ngFor="let transaction of transactionsService.transactions")
    mat-card(class="small-card")
      mat-card-title
        div(style="display: flex; align-items: center;")
          span(style="align-self: center;") {{transaction.description}}
          span(style="flex: 1 1 auto;")
          button(mat-icon-button, [matMenuTriggerFor]="transactionMenu", style="align-self: flex-start;", aria-label="#{__('Open menu')}")
            mat-icon more_vert
          mat-menu(#transactionMenu="matMenu")
            button(mat-menu-item, (click)="duplicateTransaction(transaction)")
              mat-icon content_copy
              span #{__("Duplicate")}
            button(mat-menu-item, (click)="startEditing(transaction)")
              mat-icon edit
              span #{__("Edit")}
            button(mat-menu-item, (click)="deleteTransaction(transaction)")
              mat-icon delete_forever
              span #{__("Delete")}
      mat-card-subtitle
        | {{transaction.date | date}}
      mat-card-content
        mat-chip-list
          mat-chip(*ngFor="let tag of transaction.tags", selectable="false") {{tag}}
      mat-card-content([ngClass]="{'mat-input-error': !transactionsService.isAmountOk(transaction)}")
        div(style="display: flex; align-items: top;")
          div(style="display: block;")
            ng-template([ngIf]="transactionsService.isExpenseIncomeTransaction(transaction)")
              div(*ngFor="let account of transactionsService.getAccounts(transaction, transactionsService.allAccountsPredicate); last as last")
                | {{account.name}}{{last ? '' : ', '}}
            ng-template([ngIf]="transactionsService.isTransferTransaction(transaction)")
              div(*ngFor="let account of transactionsService.getAccounts(transaction, transactionsService.fromAccountsPredicate); last as last; first as first")
                | {{first && !last ? '(' : ''}}{{account.name}}{{last ? '' : ', '}}{{last && !first ? ')' : ''}}
              mat-icon arrow_downward
              div(*ngFor="let account of transactionsService.getAccounts(transaction, transactionsService.toAccountsPredicate); last as last; first as first")
                | {{first && !last ? '(' : ''}}{{account.name}}{{last ? '' : ', '}}{{last && !first ? ')' : ''}}
          span(style="flex: 1 1 auto;")
          div(style="display: block;")
            div(*ngFor="let currencyAmount of totalsByCurrency(transaction)", style="text-align: right")
              span(*ngIf="transactionsService.isTransferTransaction(transaction)")
                | &sum;
              | {{currencyAmount.amount | number:"1.2-2"}} {{currencyAmount.currency}}
div(*ngIf="transactionsService.isLoadingNextPage()", class="card-container")
  mat-card(class="large-card")
    mat-card-content
      div
        span #{__('Loading...')}
      div
        mat-progress-bar(mode="indeterminate")
